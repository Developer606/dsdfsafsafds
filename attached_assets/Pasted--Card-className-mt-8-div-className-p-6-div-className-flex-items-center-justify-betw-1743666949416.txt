<Card className="mt-8">
  <div className="p-6">
    <div className="flex items-center justify-between mb-6">
      <div>
        <h2 className="text-xl font-bold">User Management</h2>
        <p className="text-sm text-muted-foreground mt-1">
          Manage user accounts, permissions, and subscriptions
        </p>
      </div>
      <div className="flex items-center gap-4">
        <Input
          placeholder="Search by username or email..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-[300px]"
        />
        {(statusFilter.length > 0 ||
          subscriptionFilter.length > 0 ||
          locationFilter.length > 0 ||
          loginFilter !== "all" ||
          characterFilter.min !== undefined ||
          characterFilter.max !== undefined) && (
          <Button
            variant="outline"
            size="sm"
            onClick={clearFilters}
            className="gap-2"
          >
            <X className="h-4 w-4" />
            Clear Filters
          </Button>
        )}
        <Users className="h-5 w-5 text-muted-foreground" />
      </div>
    </div>

{/* Add bulk actions section */}
<div className="flex items-center justify-between mb-4 pb-4 border-b">
  <div className="flex items-center gap-4">
    <div className="flex items-center gap-2">
      <Checkbox
        checked={
          selectedUsers.length > 0 &&
          selectedUsers.length === filteredUsers.length
        }
        onCheckedChange={handleSelectAll}
        aria-label="Select all users"
      />
      <span className="text-sm text-muted-foreground">
        {selectedUsers.length > 0
          ? `Selected ${selectedUsers.length} user${selectedUsers.length === 1 ? "" : "s"}`
          : "Select all"}
      </span>
    </div>
  </div>
  
  {selectedUsers.length > 0 && (
    <div className="flex items-center gap-2">
      <Button
        variant="destructive"
        size="sm"
        onClick={() => {
          if (
            window.confirm(
              `Delete ${selectedUsers.length} selected users?`,
            )
          ) {
            bulkDeleteUsers.mutate(selectedUsers);
          }
        }}
        disabled={bulkDeleteUsers.isPending}
        className="gap-2"
      >
        <Trash2 className="h-4 w-4" />
        Delete
      </Button>

      <Button
        variant="outline"
        size="sm"
        onClick={() =>
          bulkUpdateUsers.mutate({
            userIds: selectedUsers,
            action: "restrict",
            value: true,
          })
        }
        disabled={bulkUpdateUsers.isPending}
        className="gap-2"
      >
        <Lock className="h-4 w-4" />
        Restrict
      </Button>
      {/* Additional bulk action buttons would be here */}
    </div>
  )}
</div>
<div className="overflow-x-auto">
  <Table>
    <TableHeader>
      <TableRow>
        <TableHead className="w-[50px]">
          <Checkbox
            checked={
              selectedUsers.length > 0 &&
              selectedUsers.length === filteredUsers.length
            }
            onCheckedChange={handleSelectAll}
            aria-label="Select all users"
          />
        </TableHead>
        <TableHead className="w-[150px]">Username</TableHead>
        <TableHead className="w-[200px]">Email</TableHead>
        <TableHead className="w-[100px]">
          <div className="flex items-center gap-2">
            Status
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0"
                >
                  <ChevronDown className="h-4 w-4" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-[200px] p-0" align="start">
                <Command>
                  <CommandInput placeholder="Filter status..." />
                  <CommandEmpty>No status found.</CommandEmpty>
                  <CommandGroup>
                    {["Active", "Blocked", "Restricted"].map(
                      (status) => (
                        <CommandItem
                          key={status}
                          onSelect={() => {
                            setStatusFilter((prev) =>
                              prev.includes(status)
                                ? prev.filter((s) => s !== status)
                                : [...prev, status],
                            );
                          }}
                        >
                          <div
                            className={`mr-2 flex h-4 w-4 items-center justify-center rounded-sm border ${
                              statusFilter.includes(status)
                                ? "bg-primary"
                                : "border-primary"
                            }`}
                          >
                            {statusFilter.includes(status) && "âœ“"}
                          </div>
                          {status}
                        </CommandItem>
                      ),
                    )}
                  </CommandGroup>
                </Command>
              </PopoverContent>
            </Popover>
          </div>
        </TableHead>
        {/* Other table headers for subscription, login, etc. follow similar pattern */}
      </TableRow>
    </TableHeader>
    <TableBody>
      {filteredUsers.map((user) => (
        <TableRow
          key={user.id}
          className="hover:bg-slate-50/50 dark:hover:bg-slate-900/50 transition-colors"
        >
          <TableCell>
            <Checkbox
              checked={selectedUsers.includes(user.id)}
              onCheckedChange={(checked) =>
                handleSelectUser(user.id, checked as boolean)
              }
              aria-label={`Select user ${user.username}`}
            />
          </TableCell>
          <TableCell className="font-medium">
            {user.username}
          </TableCell>
          <TableCell>{user.email}</TableCell>
          <TableCell>
            <div className="flex flex-col gap-1">
              {user.isBlocked 
                ? <Badge variant="destructive">Blocked</Badge>
                : user.isRestricted
                ? <Badge variant="outline">Restricted</Badge>
                : <Badge variant="success">Active</Badge>
              }
            </div>
          </TableCell>
          {/* Other table cells follow */}
          <TableCell>
            <div className="flex items-center gap-2">
              {/* Action buttons */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="icon">
                    <MoreHorizontal className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  {/* User action menu items */}
                </DropdownMenuContent>
              </DropdownMenu>
              
              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button variant="ghost" size="icon" className="text-destructive">
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent>
                  {/* Delete confirmation dialog */}
                </AlertDialogContent>
              </AlertDialog>
            </div>
          </TableCell>
        </TableRow>
      ))}
      {filteredUsers.length === 0 && (
        <TableRow>
          <TableCell
            colSpan={10}
            className="text-center py-8 text-muted-foreground"
          >
            No users found matching "{searchQuery}"
          </TableCell>
        </TableRow>
      )}
    </TableBody>
  </Table>
</div>
const filteredUsers = users?.filter((user) => {
  // Search filter
  const matchesSearch =
    user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||
    user.email.toLowerCase().includes(searchQuery.toLowerCase());

  // Status filter
  const matchesStatus =
    statusFilter.length === 0 ||
    statusFilter.some((status) => {
      if (status === "Active") return !user.isBlocked && !user.isRestricted;
      if (status === "Blocked") return user.isBlocked;
      if (status === "Restricted") return user.isRestricted;
      return false;
    });

  // Subscription filter
  const matchesSubscription =
    subscriptionFilter.length === 0 ||
    subscriptionFilter.includes(
      user.subscriptionTier || (user.isPremium ? "Premium" : "Free"),
    );

  // Location filter
  const matchesLocation =
    locationFilter.length === 0 ||
    locationFilter.includes(user.countryName || "Unknown");

  // Login filter
  const matchesLogin = (() => {
    if (loginFilter === "all") return true;
    if (loginFilter === "never") return !user.lastLoginAt;
    if (!user.lastLoginAt) return false;
    
    const lastLogin = new Date(user.lastLoginAt);
    const now = new Date();
    const daysDiff = (now.getTime() - lastLogin.getTime()) / (1000 * 3600 * 24);

    if (loginFilter === "week") return daysDiff <= 7;
    if (loginFilter === "month") return daysDiff <= 30;
    return true;
  })();

  // Characters filter
  const matchesCharacters = (() => {
    if (!characterFilter.min && !characterFilter.max) return true;
    const count = user.trialCharactersCreated;
    if (characterFilter.min && count < characterFilter.min) return false;
    if (characterFilter.max && count > characterFilter.max) return false;
    return true;
  })();

  return (
    matchesSearch &&
    matchesStatus &&
    matchesSubscription &&
    matchesLocation &&
    matchesLogin &&
    matchesCharacters
  );
}) ?? [];
// Add selection handlers
const handleSelectAll = (checked: boolean) => {
  if (checked) {
    setSelectedUsers(filteredUsers.map((user) => user.id));
  } else {
    setSelectedUsers([]);
  }
};

const handleSelectUser = (userId: number, checked: boolean) => {
  if (checked) {
    setSelectedUsers((prev) => [...prev, userId]);
  } else {
    setSelectedUsers((prev) => prev.filter((id) => id !== userId));
  }
};
const bulkDeleteUsers = useMutation({
  mutationFn: async (userIds: number[]) => {
    const res = await apiRequest("POST", "/api/admin/users/bulk-delete", {
      userIds,
    });
    return res.json();
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ["/api/admin/users"] });
    toast({
      title: "Success",
      description: "Selected users deleted successfully",
    });
    setSelectedUsers([]);
  },
});

const bulkUpdateUsers = useMutation({
  mutationFn: async ({
    userIds,
    action,
    value,
  }: {
    userIds: number[];
    action: string;
    value: boolean;
  }) => {
    const res = await apiRequest("POST", `/api/admin/users/bulk-${action}`, {
      userIds,
      value,
    });
    return res.json();
  },
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ["/api/admin/users"] });
    toast({
      title: "Success",
      description: "Selected users updated successfully",
    });
    setSelectedUsers([]);
  },
});